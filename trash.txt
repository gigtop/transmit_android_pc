#include <iostream>
#include <vector>
#include <string>
using namespace std;

class MySet {
private:
    vector<string> data;              // хранение элементов множества
    static vector<string> UNIVERSUM;  // универсальное множество

    // Собственная реализация поиска
    int findIndex(const string& t) const {
        for (size_t i = 0; i < data.size(); i++) {
            if (data[i] == t)
                return (int)i;
        }
        return -1; // если элемент не найден
    }

    // Проверка: элемент есть в универсуме?
    static bool inUniversum(const string& t) {
        for (const string& x : UNIVERSUM) {
            if (x == t) return true;
        }
        return false;
    }

public:
    // Создать пустое множество
    MySet() {}

    // Включить элемент (только если есть в универсуме)
    void add(const string& t) {
        if (inUniversum(t) && !contains(t))
            data.push_back(t);
    }

    // Принадлежит?
    bool contains(const string& t) const {
        return findIndex(t) != -1;
    }

    // Исключить
    void remove(const string& t) {
        int idx = findIndex(t);
        if (idx != -1)
            data.erase(data.begin() + idx);
    }

    // Пусто?
    bool isEmpty() const {
        return data.empty();
    }

    // Объединение
    MySet Union(const MySet& other) const {
        MySet result = *this;
        for (const string& x : other.data)
            result.add(x);
        return result;
    }

    // Пересечение
    MySet Intersection(const MySet& other) const {
        MySet result;
        for (const string& x : data) {
            if (other.contains(x))
                result.add(x);
        }
        return result;
    }

    // Разность
    MySet Difference(const MySet& other) const {
        MySet result;
        for (const string& x : data) {
            if (!other.contains(x))
                result.add(x);
        }
        return result;
    }

    // Дополнение
    MySet Complement() const {
        MySet result;
        for (const string& x : UNIVERSUM) {
            if (!contains(x))
                result.add(x);
        }
        return result;
    }

    // Установить универсум
    static void setUniversum(const vector<string>& u) {
        UNIVERSUM = u;
    }

    // Печать
    void print() const {
        cout << "{ ";
        for (const string& x : data) cout << x << " ";
        cout << "}";
    }
};

// Определение статического поля
vector<string> MySet::UNIVERSUM = {};


// -------------------- Демонстрация --------------------
int main() {
    setlocale(LC_ALL, ""); // поддержка кириллицы

    // Задаём универсум (мебель)
    MySet::setUniversum({"стол", "стул", "диван", "кресло", "шкаф", "кровать"});

    MySet A, B;

    A.add("стол");
    A.add("стул");
    A.add("шкаф");

    B.add("диван");
    B.add("стул");

    cout << "A = "; A.print(); cout << endl;
    cout << "B = "; B.print(); cout << endl;

    cout << "Объединение: "; A.Union(B).print(); cout << endl;
    cout << "Пересечение: "; A.Intersection(B).print(); cout << endl;
    cout << "Разность A - B: "; A.Difference(B).print(); cout << endl;
    cout << "Дополнение A: "; A.Complement().print(); cout << endl;
    cout << "Пусто ли A? " << (A.isEmpty() ? "Да" : "Нет") << endl;
    cout << "Элемент стул принадлежит A? " << (A.contains("стул") ? "Да" : "Нет") << endl;

    A.remove("стул");
    cout << "После удаления стула: "; A.print(); cout << endl;

    // Попробуем добавить элемент, которого нет в универсуме
    A.add("лампа"); // не добавится
    cout << "После попытки добавить 'лампа': "; A.print(); cout << endl;

    return 0;
}