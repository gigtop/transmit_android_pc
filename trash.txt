#include <iostream>
#include <string>
#include "My_vector.h"   // подключаем твой контейнер

using namespace std;

class Set {
private:
    My_vector<string> elements;       // множество
    My_vector<string> universe;       // универсум мебели

    // поиск элемента в векторе
    int find(const My_vector<string>& vec, const string& value) const {
        for (size_t i = 0; i < vec.size(); i++) {
            if (vec[i] == value) return (int)i;
        }
        return -1;
    }

public:
    Set(const My_vector<string>& univ) : universe(univ) {}

    // Создать (пустое множество)
    void create() {
        elements.clear();
    }

    // Включить элемент (если есть в универсуме и ещё нет в множестве)
    void include(const string& t) {
        if (find(universe, t) == -1) {
            cout << "❌ Элемента \"" << t << "\" нет в универсуме!\n";
            return;
        }
        if (find(elements, t) == -1) {
            elements.push_back(t);
        }
    }

    // Принадлежит?
    bool belongs(const string& t) const {
        return (find(elements, t) != -1);
    }

    // Исключить
    void exclude(const string& t) {
        int pos = find(elements, t);
        if (pos != -1) elements.erase(pos);
    }

    // Пусто?
    bool empty() const {
        return elements.size() == 0;
    }

    // Объединение
    Set Union(const Set& other) const {
        Set result(universe);
        result.elements = elements;
        for (size_t i = 0; i < other.elements.size(); i++) {
            if (find(result.elements, other.elements[i]) == -1) {
                result.elements.push_back(other.elements[i]);
            }
        }
        return result;
    }

    // Пересечение
    Set Intersection(const Set& other) const {
        Set result(universe);
        for (size_t i = 0; i < elements.size(); i++) {
            if (find(other.elements, elements[i]) != -1) {
                result.elements.push_back(elements[i]);
            }
        }
        return result;
    }

    // Разность
    Set Difference(const Set& other) const {
        Set result(universe);
        for (size_t i = 0; i < elements.size(); i++) {
            if (find(other.elements, elements[i]) == -1) {
                result.elements.push_back(elements[i]);
            }
        }
        return result;
    }

    // Дополнение
    Set Complement() const {
        Set result(universe);
        for (size_t i = 0; i < universe.size(); i++) {
            if (find(elements, universe[i]) == -1) {
                result.elements.push_back(universe[i]);
            }
        }
        return result;
    }

    // Печать
    void print() const {
        cout << "{ ";
        for (size_t i = 0; i < elements.size(); i++) {
            cout << elements[i];
            if (i < elements.size() - 1) cout << ", ";
        }
        cout << " }" << endl;
    }
};


int main() {
    setlocale(LC_ALL, "ru");

    // Универсум мебели
    My_vector<string> universe = {"стол", "стул", "шкаф", "диван", "кресло", "кровать"};

    Set A(universe), B(universe);

    A.create();
    B.create();

    A.include("стол");
    A.include("стул");
    A.include("шкаф");

    B.include("диван");
    B.include("стул");
    B.include("кровать");

    cout << "Множество A = "; A.print();
    cout << "Множество B = "; B.print();

    cout << "Объединение: "; A.Union(B).print();
    cout << "Пересечение: "; A.Intersection(B).print();
    cout << "Разность A\\B: "; A.Difference(B).print();
    cout << "Дополнение A: "; A.Complement().print();

    return 0;
}