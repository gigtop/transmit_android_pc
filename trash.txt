#include <iostream>
#include <cstring>
using namespace std;

const int MAX_LEN = 50; // максимальная длина строки

class MySet {
private:
    char** data;    // динамический массив строк
    int size;       // текущее количество элементов
    int capacity;   // вместимость

    static char** UNIVERSUM;
    static int U_size;

    // Увеличение массива
    void resize() {
        int newCap = capacity * 2;
        char** newData = new char*[newCap];
        for (int i = 0; i < size; i++) {
            newData[i] = new char[MAX_LEN];
            strcpy(newData[i], data[i]);
            delete[] data[i];
        }
        delete[] data;
        data = newData;
        capacity = newCap;
    }

public:
    MySet(int cap = 10) {
        size = 0;
        capacity = cap;
        data = new char*[capacity];
        for (int i = 0; i < capacity; i++) {
            data[i] = new char[MAX_LEN];
            data[i][0] = '\0';
        }
    }

    ~MySet() {
        for (int i = 0; i < capacity; i++) {
            delete[] data[i];
        }
        delete[] data;
    }

    // Проверка принадлежности
    bool contains(const char* t) const {
        for (int i = 0; i < size; i++) {
            if (strcmp(data[i], t) == 0) return true;
        }
        return false;
    }

    // Добавить элемент
    void add(const char* t) {
        if (!contains(t)) {
            if (size == capacity) resize();
            strcpy(data[size++], t);
        }
    }

    // Удалить элемент
    void remove(const char* t) {
        for (int i = 0; i < size; i++) {
            if (strcmp(data[i], t) == 0) {
                for (int j = i; j < size - 1; j++) {
                    strcpy(data[j], data[j + 1]);
                }
                size--;
                break;
            }
        }
    }

    // Пусто?
    bool isEmpty() const {
        return size == 0;
    }

    // Объединение
    MySet Union(const MySet& other) const {
        MySet result(size + other.size);
        for (int i = 0; i < size; i++) result.add(data[i]);
        for (int i = 0; i < other.size; i++) result.add(other.data[i]);
        return result;
    }

    // Пересечение
    MySet Intersection(const MySet& other) const {
        MySet result;
        for (int i = 0; i < size; i++) {
            if (other.contains(data[i])) result.add(data[i]);
        }
        return result;
    }

    // Разность
    MySet Difference(const MySet& other) const {
        MySet result;
        for (int i = 0; i < size; i++) {
            if (!other.contains(data[i])) result.add(data[i]);
        }
        return result;
    }

    // Дополнение
    MySet Complement() const {
        MySet result;
        for (int i = 0; i < U_size; i++) {
            if (!contains(UNIVERSUM[i])) result.add(UNIVERSUM[i]);
        }
        return result;
    }

    // Установить универсум
    static void setUniversum(const char* arr[], int n) {
        // освободить память, если уже был установлен
        if (UNIVERSUM != nullptr) {
            for (int i = 0; i < U_size; i++) delete[] UNIVERSUM[i];
            delete[] UNIVERSUM;
        }
        U_size = n;
        UNIVERSUM = new char*[n];
        for (int i = 0; i < n; i++) {
            UNIVERSUM[i] = new char[MAX_LEN];
            strcpy(UNIVERSUM[i], arr[i]);
        }
    }

    // Печать
    void print() const {
        cout << "{ ";
        for (int i = 0; i < size; i++) cout << data[i] << " ";
        cout << "}";
    }
};

// статические поля
char** MySet::UNIVERSUM = nullptr;
int MySet::U_size = 0;


// -------------------- Демонстрация --------------------
int main() {
    const char* U[] = {"apple", "banana", "cherry", "date", "fig"};
    MySet::setUniversum(U, 5);

    MySet A, B;

    A.add("apple");
    A.add("banana");
    A.add("cherry");

    B.add("cherry");
    B.add("date");

    cout << "A = "; A.print(); cout << endl;
    cout << "B = "; B.print(); cout << endl;

    cout << "Объединение: "; A.Union(B).print(); cout << endl;
    cout << "Пересечение: "; A.Intersection(B).print(); cout << endl;
    cout << "Разность A - B: "; A.Difference(B).print(); cout << endl;
    cout << "Дополнение A: "; A.Complement().print(); cout << endl;
    cout << "Пусто ли A? " << (A.isEmpty() ? "Да" : "Нет") << endl;
    cout << "Принадлежит ли 'banana' множеству A? " << (A.contains("banana") ? "Да" : "Нет") << endl;

    A.remove("banana");
    cout << "После удаления 'banana': "; A.print(); cout << endl;

    return 0;
}