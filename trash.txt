#include <string>
#include "My_vector.h"

using namespace std;

class Set {
private:
    My_vector<string> elements;
    My_vector<string> universe;

    int find(const My_vector<string>& vec, const string& value) const {
        for (size_t i = 0; i < vec.size(); i++) {
            if (vec[i] == value) return (int)i;
        }
        return -1;
    }

public:
    Set(const My_vector<string>& univ) : universe(univ) {}

    void create() {
        elements.clear();
    }

    void include(const string& t) {
        if (find(universe, t) == -1) {
            printf("❌ Элемента \"%s\" нет в универсуме!\n", t.c_str());
            return;
        }
        if (find(elements, t) == -1) {
            elements.push_back(t);
        }
    }

    bool belongs(const string& t) const {
        return (find(elements, t) != -1);
    }

    void exclude(const string& t) {
        int pos = find(elements, t);
        if (pos != -1) elements.erase(pos);
    }

    bool empty() const {
        return elements.size() == 0;
    }

    Set Union(const Set& other) const {
        Set result(universe);
        result.elements = elements;
        for (size_t i = 0; i < other.elements.size(); i++) {
            if (find(result.elements, other.elements[i]) == -1) {
                result.elements.push_back(other.elements[i]);
            }
        }
        return result;
    }

    Set Intersection(const Set& other) const {
        Set result(universe);
        for (size_t i = 0; i < elements.size(); i++) {
            if (find(other.elements, elements[i]) != -1) {
                result.elements.push_back(elements[i]);
            }
        }
        return result;
    }

    Set Difference(const Set& other) const {
        Set result(universe);
        for (size_t i = 0; i < elements.size(); i++) {
            if (find(other.elements, elements[i]) == -1) {
                result.elements.push_back(elements[i]);
            }
        }
        return result;
    }

    Set Complement() const {
        Set result(universe);
        for (size_t i = 0; i < universe.size(); i++) {
            if (find(elements, universe[i]) == -1) {
                result.elements.push_back(universe[i]);
            }
        }
        return result;
    }

    void print() const {
        printf("{ ");
        for (size_t i = 0; i < elements.size(); i++) {
            printf("%s", elements[i].c_str());
            if (i < elements.size() - 1) printf(", ");
        }
        printf(" }\n");
    }
};

int main() {
    setlocale(LC_ALL, "ru");

    My_vector<string> universe = {"стол", "стул", "шкаф", "диван", "кресло", "кровать"};

    Set A(universe), B(universe);

    A.create();
    B.create();

    A.include("стол");
    A.include("стул");
    A.include("шкаф");

    B.include("диван");
    B.include("стул");
    B.include("кровать");

    printf("Множество A = "); A.print();
    printf("Множество B = "); B.print();

    printf("Объединение: "); A.Union(B).print();
    printf("Пересечение: "); A.Intersection(B).print();
    printf("Разность A\\B: "); A.Difference(B).print();
    printf("Дополнение A: "); A.Complement().print();

    return 0;
}